const RitaScriptVisitor = require('./lib/RitaScriptVisitor').RitaScriptVisitor;

String.prototype.uc = function () {
  return this.toUpperCase();
}

String.prototype.ucf = function () {
  return this[0].toUpperCase() + this.substring(1);
}

/**
 * This Visitor walks the tree generated by a parser
 */
class Visitor extends RitaScriptVisitor {

  constructor(context, lexerRules, parserRules) {
    super();
    this.lexerRules = lexerRules;
    this.parserRules = parserRules;
    this.context = context || {};
  }

  // Entry point for tree visiting
  start(ctx) {
    return this.visitScript(ctx).replace(/ +/g, ' ');
  }

  visitChildren(ctx) {
    return ctx.children.reduce((acc, child) => {
      (child.transforms = ctx.transforms);
      return acc + this.visit(child);
    }, '');
  }

  // Visits a leaf node and returns a string
  visitTerminal(ctx) {
    let text = ctx.getText();
    if (text !== '<EOF>') {
      for (var i = 0; ctx.transforms && i < ctx.transforms.length; i++) {
        let transform = ctx.transforms[i];
        if (typeof text[transform] === 'undefined') {
          throw Error('Bad transform:' + transform);
        }
        //
        // TODO: doesn't handle nested properties (see Spectre)
        //
        if (typeof text[transform] === 'function') {
          text = text[transform](); // call function
        } else {
          text = text[transform]; // get property
        }
      }
      //console.log('visitTerminal', "'" + ctx.getText() + "'", ctx.transforms || '[]', '->', text);
      return text;
    }
    return ''; // ignore EOFs
  }

  visitSymbol(ctx) {
    //console.log('visitSymbol -> "' + ctx.getText() + '" -> '+this.context[ctx.getText()]);
    let text = ctx.getText();
    if (text.length && text[0] === '$') text = text.substring(1);
    return this.context[text] || text;
  }

  getRuleName(ctx) {
    return ctx.hasOwnProperty('symbol') ?
      this.lexerRules[ctx.symbol.type] :
      this.parserRules[ctx.ruleIndex];
  }

  printChildren(ctx) {
    for (let i = 0; i < ctx.getChildCount(); i++) {
      let child = ctx.getChild(i);
      console.log(i, child.getText(), this.getRuleName(child));
    }
  }

  flattenTokens(toks) {
    if (!Array.isArray(toks)) toks = [toks];
    return toks.reduce((acc, t) => acc += '[' + this.getRuleName(t) + ':' + t.getText() + ']', 'choice: ');
  }

  appendToArray(orig, adds) {

    let res = (adds && adds.length) ? (orig || []).concat(adds) : orig;
    //console.log('     appended', '->',res);
    return res;
  }

  inheritTransforms(token, ctx) {
    let newTransforms = ctx.transform().map(t => t.getText().substring(1, t.getText().length - 2));
    newTransforms = this.appendToArray(newTransforms, ctx.transforms);
    return this.appendToArray(token.transforms, newTransforms);
  }

  visitFullChoice(ctx) {
    let options = ctx.expr();

    let token = this.randomElement(options);
    //console.log(this.flattenTokens(options), ' -> ', this.flattenTokens(token));

    let newTransforms = ctx.transform().map(t => t.getText().substring(1, t.getText().length - 2));
    newTransforms = this.appendToArray(newTransforms, ctx.transforms);
    //console.log('   existing-transforms: ' + (ctx.transforms || '[]') + '\n   new-transforms: ', newTransforms);
    //console.log('   combined: ', newTransforms);
    token.transforms = this.appendToArray(token.transforms, newTransforms);
    //token.transforms = this.inheritTransforms(token, ctx);

    return this.visit(token);
  }

  visitEmptyChoice(ctx) { // TODO: remove?
    let options = ctx.expr().concat("");
    let picked = this.randomElement(options);
    let result = typeof picked === 'string' ? picked : this.visit(picked);

    //console.log("\nEMPTY-PICK", picked, typeof picked);
    return result;
  }

  randomElement(arr) {
    return arr[Math.floor((Math.random() * arr.length))];
  }
}

module.exports = Visitor;
