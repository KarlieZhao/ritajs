const RitaScriptVisitor = require('./lib/RitaScriptVisitor').RitaScriptVisitor;

/**
 * This Visitor walks the tree generated by a parser
 */
class Visitor extends RitaScriptVisitor {

  constructor(context, lexerRules, parserRules) {
    super();
    this.lexerRules = lexerRules;
    this.parserRules = parserRules;
    this.context = context || {};
  }

  // Entry point for tree visiting
  start(ctx) {
    return this.visitScript(ctx);
  }

  visitChildren(ctx) {
    return ctx.children.reduce((acc, child) => acc += this.visit(child), '');
  }

  // Visits a leaf node and returns a string
  visitTerminal(ctx) {
    let txt = ctx.getText();
    return txt !== '<EOF>' ? txt: ''; // ignore EOFs
  }

  visitScript(ctx) {
    //console.log('visitScript -> "' + ctx.getText() + '"');
    return this.visitChildren(ctx).replace(/ +/g, ' ');
  }

  visitSymbol(ctx) {
    //console.log('visitSymbol -> "' + ctx.getText() + '" -> '+this.context[ctx.getText()]);
    let text = ctx.getText();
    if (text.length && text[0] === '$') text = text.substring(1);
    return this.context[text] || text;
  }

  getRuleName(ctx) {
    return ctx.hasOwnProperty('symbol') ?
      this.lexerRules[ctx.symbol.type] :
      this.parserRules[ctx.ruleIndex];
  }

  printChildren(ctx) {
    for (let i = 0; i < ctx.getChildCount(); i++) {
      let child = ctx.getChild(i);
      console.log(i, child.getText(), this.getRuleName(child));
    }
  }

  visitFullChoice(ctx) {
    let picked = this.visit(this.randomElement(ctx.expr()));
    //this.handleTansforms(ctx.transform(), picked);
    //console.log("\nPICK", picked, typeof picked);
    return picked.trim();
  }

  visitEmptyChoice(ctx) {
    let options = ctx.expr().concat("");
    let picked = this.randomElement(options);
    let result = typeof picked === 'string' ? picked : this.visit(picked);
    //console.log("\nEMPTY-PICK", picked, typeof picked);
    return result.trim();
  }

  randomElement(arr) {
    return arr[Math.floor((Math.random() * arr.length))];
  }
}

module.exports = Visitor;
