const antlr4 = require('antlr4');
const { RiScriptVisitor } = require('../lib/RiScriptVisitor');
const { RiScriptParser } = require('../lib/RiScriptParser');
const EmptyExpr = new RiScriptParser.ExprContext();

String.prototype.uc = function () {
  return this.toUpperCase();
}

String.prototype.ucf = function () {
  return this[0].toUpperCase() + this.substring(1);
}

/*
 * This Visitor walks the tree generated by a parser, evaluating
 * each node as it goes
 */
class Visitor extends RiScriptVisitor {

  constructor(parent, context, trace, silent) {
    super();
    this.trace = trace;
    this.parent = parent;
    this.context = context || {};
    this.ignoreMissingSymbols = silent;
  }

  visitExpr(ctx) {
    this.trace && console.log('visitExpr(' + ctx.getText() + ') ');
    // ctx.children ? ctx.children.length);
    //this.trace && this.printChildren(ctx);
    return this.visitChildren(ctx);
  }

  visitText(ctx) {
    this.trace && console.log('visitText(' + ctx.getText() + ') ');
    return ctx.getText();
  }

  /* visit value and create a mapping in the symbol table */
  visitAssign(ctx) {
    let token = ctx.expr();
    let id = this.symbolName(ctx.symbol().getText());
    this.trace && console.log('visitAssign: $' + id + '=' +
      this.flatten(token) + ' tfs=[' + (token.transforms || '') + ']');
    this.context[id] = token ? this.visit(token) : '';
    return ''; // no output on vanilla assign
  }

  /* output expr value and create a mapping in the symbol table */
  visitInline(ctx) {
    let token = ctx.expr();
    let id = this.symbolName(ctx.symbol().getText());
    this.trace && console.log('visitInline: $' + id + '=' +
      this.flatten(token) + ' tfs=[' + (token.transforms || '') + ']');
    this.context[id] = token ? this.visit(token) : '';
    return this.context[id];
  }

  /* expand the choices according to specified probabilities */
  visitChoice(ctx) {
    let options = ctx.expr();
    this.handleEmptyChoices(ctx, options);
    let token = this.randomElement(options);
    token.transforms = this.inheritTransforms(token, ctx);
    this.trace && console.log('visitChoice: ' + this.flatten(token),
      "tfs=" + (token.transforms || "[]"));
    return this.visit(token);
  }

  /* simply visit the resolved symbol, don't reparse */
  visitSymbol(ctx) {

    let ident = ctx.ident().getText()
      .replace(/^\$/, '') // strip $
      .replace(/[}{]/g, ''); // strip {}

    this.trace && console.log('visitSymbol: $' + ident
      + ' tfs=[' + (ctx.transform() || '') + '] ctx[\''
      + ident + '\']=' + this.context[ident]);

    let text = this.context[ident] || '$' + ident;

    /* TODO: what if we get choice or symbol or here ...
    need to visit, but its not a context, just a string
    Options: either reparse, or simply treat as terminal 
    to be handled if necessary in multeval() call */

    return this.visitTerminal(text, ctx.transform());
  }

  visitTerminal(ctx, tforms) {

    let term = ctx;
    if (typeof ctx.getText === 'function') {
      term = ctx.getText();
    }

    let tfs = tforms || ctx.transforms;

    if (typeof term === 'string') {
      if (term === Visitor.EOF) return '';
      term = term.replace(/\r?\n/, ' '); // no line-breaks

      this.trace && console.log('visitTerminal: "'
        + term + '" tfs=[' + (tfs || '') + ']');

      if (term.includes('$')) {
        if (!RiTa.SILENT && !this.ignoreMissingSymbols) {
          console.warn('[WARN] Unresolved symbol(s): ' + term);
        }
        return term + (tfs ? tfs.reduce((acc, val) => acc +
          (typeof val === 'string' ? val : val.getText()), '') : '');
      }
    } else {

      this.trace && console.log('visitTerminal2(' + (typeof term) + '): "'
        + JSON.stringify(term) + '" tfs=[' + (tfs || '') + ']');
    }

    return this.handleTransforms(term, tfs);
  }

  /* run the transforms and return the results */
  handleTransforms(obj, transforms) {
    let term = obj;
    if (transforms && transforms.length) {
      let tfs = this.trace ? '' : null; // debugging
      for (let i = 0; i < transforms.length; i++) {
        let transform = transforms[i];
        transform = (typeof transform === 'string') ? transform : transform.getText();

        this.trace && (tfs += transform); // debugging
        let comps = transform.split('.');
        for (let j = 1; j < comps.length; j++) {
          if (comps[j].endsWith(Visitor.FUNCTION)) {
            comps[j] = comps[j].substring(0, comps[j].length - 2);
            if (typeof term[comps[j]] === 'function') {
              term = term[comps[j]]();
            }
            else {
              throw Error('Expecting ' + term + '.' + comps[j] + ' to be a function');
            }
          } else if (term.hasOwnProperty(comps[j])) { // property
            term = term[comps[j]];
          } else {
            term = term + '.' + comps[j]; // no-op
          }
        }
      }
      this.trace && (typeof obj !== 'string' || obj.trim().length)
        && console.log('handleTransforms: ' + obj + tfs + ' -> ' + term);
    }
    return term;
  }

  // Entry point for tree visiting
  start(ctx) {
    return this.visitScript(ctx).trim();
  }

  // ---------------------- Helpers ---------------------------

  symbolName(text) {
    return (text.length && text[0] === Visitor.SYM) ? text.substring(1) : text;
  }

  getRuleName(ctx) {
    return ctx.hasOwnProperty('symbol') ?
      this.parent.lexer.symbolicNames[ctx.symbol.type] :
      this.parent.parser.ruleNames[ctx.ruleIndex];
  }

  countChildRules(ctx, ruleName) {
    let count = 0;
    for (let i = 0; i < ctx.getChildCount(); i++) {
      if (this.getRuleName(ctx.getChild(i)) === ruleName) count++;
    }
    return count;
  }

  printChildren(ctx) {
    for (let i = 0; i < ctx.getChildCount(); i++) {
      let child = ctx.getChild(i);
      console.log('  child' + i + ':', child.getText(), 'type=' + this.getRuleName(child));
    }
  }

  flatten(toks) {
    if (!Array.isArray(toks)) toks = [toks];
    return toks.reduce((acc, t) => acc += '[' + this.getRuleName(t) + ':' + t.getText() + ']', '');
  }

  flattenChoice(toks) {
    if (!Array.isArray(toks)) toks = [toks];
    return toks.reduce((acc, t) => acc += '[' + this.getRuleName(t) + ':' + t.getText() + ']', 'choice: ');
  }

  appendToArray(orig, adds) {
    return (adds && adds.length) ? (orig || []).concat(adds) : orig;
  }

  setTransforms(token, ctx) {
    let newTransforms = ctx.transform().map(t => t.getText());
    newTransforms = this.appendToArray(newTransforms, ctx.transforms);
    token.transforms = this.appendToArray(token.transforms, newTransforms);
  }

  inheritTransforms(token, ctx) {

    // TODO: when does ctx.transform != ctx.transforms
    let newTransforms = ctx.transform().map(t => t.getText());
    newTransforms = this.appendToArray(newTransforms, ctx.transforms);
    return this.appendToArray(token.transforms, newTransforms);
  }

  handleEmptyChoices(ctx, options) {
    let ors = this.countChildRules(ctx, Visitor.OR);
    let exprs = this.countChildRules(ctx, "expr");
    let adds = (ors + 1) - exprs;
    for (let i = 0; i < adds; i++) {
      options.push(EmptyExpr);
    }
  }

  randomElement(arr) {
    return arr[Math.floor((Math.random() * arr.length))];
  }

  visitChildren(ctx) {
    return ctx.children ? ctx.children.reduce((acc, child) => {
      child.transforms = ctx.transforms;
      return acc + this.visit(child);
    }, '') : '';
  }
}

function inspect(o) {
  let props = [];
  let obj = o;
  do {
    props = props.concat(Object.getOwnPropertyNames(obj));
  } while (obj = Object.getPrototypeOf(obj));
  return props.sort().filter(function (e, i, arr) {
    return (e != arr[i + 1]);// && typeof o[e] === 'function');
  });
}

function typeOf(o) {
  if (typeof o !== 'object') return typeof o;
  return Array.isArray(o) ? 'array' : 'object';
}

Visitor.LP = '(';
Visitor.RP = ')';
Visitor.OR = 'OR';
Visitor.SYM = '$';
Visitor.EOF = '<EOF>';
Visitor.ASSIGN = '[]';
Visitor.SASSIGN = '{}';
Visitor.FUNCTION = '()';

module.exports = Visitor;
